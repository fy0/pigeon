{
package leftrecursionlabeledfailures

func ids(list, id any) (any, error) {
	l := toStringSlice(list)
	l = append(l, id.(string))
	return l, nil
}

func toStringSlice(v any) []string {
	if v == nil {
		return nil
	}
	return v.([]string)
}
}

S ← list:List {
    return list.([]string), nil
} //{errComma} ErrComma //{errId} ErrID

List ← (list:List Comma id:ID) {
    return ids(list, id)
} / id:ID {
    return []string{id.(string)}, nil
}

ID ← Sp [a-z]+ {
    return strings.TrimLeft(string(c.text), " \t\r\n"), nil
} / %{errId}

Comma ← Sp ',' / %{errComma}
Sp ← [ \t\r\n]*

ErrComma ← #{
        return errors.New("expecting ','")
    } ( !([a-z]+) .)*
ErrID ← #{
        return errors.New("expecting an identifier")
    } ( !(',') .)* { return "NONE", nil }
