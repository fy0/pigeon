{
  package leftrecursion
}

start = a:expr !. {
	return a, nil
}
expr = '-' a:expr {
    strA := a.(string)
    return "(" + "-" + strA + ")", nil
} / a:expr op:('*' / '/' / '%') b:expr {
    strA := a.(string)
    strB := b.(string)
    strOp := string(op.([]byte))
    return "(" + strA + strOp + strB + ")", nil 
} / a:expr op:('+' / '-') b:expr {
    strA := a.(string)
    strB := b.(string)
    strOp := string(op.([]byte))
    return "(" + strA + strOp + strB + ")", nil
} / term {
    return string(c.text), nil
}

term = [0-9]+
